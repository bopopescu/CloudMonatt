(* attest.pv: Script for cloud attestation *)

(* -----Symmetric key encryption----- *)

type key.
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m,k),k) = m.

fun key2str(key): bitstring.
reduc forall k_x: key; str2key(key2str(k_x)) = k_x.

(* -----Asymmetric key encryption----- *)

type skey.
type pkey.
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, sk: skey; adec(aenc(m,pk(sk)),sk) = m.

fun pkey2str(pkey): bitstring.
reduc forall pk_x: pkey; str2pkey(pkey2str(pk_x)) = pk_x.

(* -----Digital signatures----- *)

fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, sk: skey; getmess(sign(m, sk)) = m.
reduc forall m: bitstring, sk: skey; checksign(sign(m, sk), pk(sk)) = m.

(* -----One-way hash function----- *)

fun hash1(bitstring):bitstring.
fun hash2(bitstring, bitstring): bitstring.
fun hash3(bitstring, bitstring, bitstring): bitstring.
fun hash4(bitstring, bitstring, bitstring, bitstring): bitstring.
fun hash5(bitstring, bitstring, bitstring, bitstring, bitstring): bitstring.

(* -----Property translation---- *)

fun prop2meareq(bitstring): bitstring.

(* ----- Variables and events----- *)

free controller_server: channel.
free server_client: channel.
free client_pca: channel.
free server_pca: channel.
free controller_pca: channel.
free server_cert: channel.

free sk_pca: skey [private].
free sk_controller: skey [private].
(* ------ If does not trust property interpretation module, set the sk_server as public ------ *)
free sk_server: skey [private].
free sk_client: skey [private].
free sk_trust: skey [private].

free controller_identify: bitstring.
free server_identify: bitstring.
free client_identify: bitstring.
free trust_identify: bitstring.

free vid: bitstring [private].
free iid: bitstring [private].
free prop: bitstring [private].
free M: bitstring [private].
free R: bitstring [private].

event sk_controller_get_cert().
event sk_server_get_cert().
event sk_client_get_cert().
event ask_client_get_cert().

event controller_start_server().
event controller_finish_server().
event server_start_controller().
event server_finish_controller().

event server_start_client().
event server_finish_client().
event client_start_server().
event client_finish_server().

event trust_start_server().
event server_finish_trust().

event controller_request().
event server_recvd().
event server_request().
event client_recvd().
event client_response().
event server_response().
event controller_response().

event vid_modified().
event vid_unmodified().
event prop_modified().
event prop_unmodified().
event server_modified().
event server_unmodified().
event rM_modified().
event rM_unmodified().
event R_modified().
event R_unmodified().
event M_modified().
event M_unmodified().




(* -----Privacy Certificate Authority----- *)

let pca_action(sk_pca:skey, pk_controller:pkey, pk_server:pkey, pk_client:pkey, pk_trust:pkey) = 
  out (controller_pca, sign((controller_identify, pkey2str(pk_controller)), sk_pca));
  out (server_pca, sign((server_identify, pkey2str(pk_server)), sk_pca));
  out (client_pca, sign((client_identify, pkey2str(pk_client)), sk_pca));

  in (client_pca, m: bitstring);
  let (k: pkey) = str2pkey(checksign(m, pk_trust)) in
    out (client_pca, sign((trust_identify, pkey2str(k)), sk_pca)).


(* -----Cloud Controller----- *)

let controller_action(sk_controller: skey, pk_pca: pkey) =
  new ky: key;
  in (controller_pca, sk_controller_cert: bitstring);
  let (=controller_identify, =pkey2str(pk(sk_controller))) = checksign(sk_controller_cert, pk_pca) in
    event sk_controller_get_cert();

  event controller_start_server(); 
  out (controller_server, (pk(sk_controller), sk_controller_cert));
  in (controller_server, m3: bitstring);
  let (pk_server: pkey, sk_server_cert: bitstring) = m3 in
    let (=server_identify, = pkey2str(pk_server)) = checksign(sk_server_cert, pk_pca) in
      out (controller_server, aenc(sign(key2str(ky), sk_controller), pk_server));

  in (controller_server, m6: bitstring);
  let z = adec(m6, sk_controller) in
    let (=ky) = str2key(checksign(z, pk_server)) in
      event controller_finish_server();

  new nonce2: bitstring;
  out (controller_server, senc((vid, iid, prop, nonce2), ky));
  event controller_request();

  in (controller_server, m5: bitstring);
  let (=vid, =iid, =prop, R_1:bitstring, =nonce2, hash_value:bitstring) = checksign(sdec(m5, ky), pk_server) in
    if hash5(vid, iid, prop, R_1, nonce2) = hash_value then
      event controller_response();

  if R_1 <> R then
    event R_modified()
  else event R_unmodified().

(* -----Attestation Server: Property Certification Module*)

let cert_action() = 
  in (server_cert, prob_2:bitstring);
  out (server_cert, R).

(* -----Attestation Server: Property Interpretation Module ----- *)

let server_action(sk_server: skey, pk_pca: pkey) =
  new kz: key;
  in (server_pca, sk_server_cert: bitstring);
  let (=server_identify, =pkey2str(pk(sk_server))) = checksign(sk_server_cert, pk_pca) in
    event sk_server_get_cert();

  in (controller_server, m1: bitstring);
  let (pk_controller: pkey, sk_controller_cert: bitstring) = m1 in
    let (=controller_identify, = pkey2str(pk_controller)) = checksign(sk_controller_cert, pk_pca) in
      event server_start_controller();

  out (controller_server, (pk(sk_server), sk_server_cert));

  in (controller_server, m2: bitstring);
  let y = adec(m2, sk_server) in
    let (ky:key) = str2key(checksign(y, pk_controller)) in
      event server_finish_controller();

  out (controller_server, aenc(sign(key2str(ky), sk_server), pk_controller));

  event server_start_client();
  out (server_client, (pk(sk_server), sk_server_cert));
  in (server_client, m3: bitstring);

  let (pk_client: pkey, sk_client_cert: bitstring) = m3 in
    let (=client_identify, = pkey2str(pk_client)) = checksign(sk_client_cert, pk_pca) in
      out (server_client, aenc(sign(key2str(kz), sk_server), pk_client));

  in (server_client, m4: bitstring);
  let z = adec(m4, sk_server) in
    let (=kz) = str2key(checksign(z, pk_client)) in
      event server_finish_client();

  in (server_client, m5: bitstring);
  let (apk_client: pkey, ask_client_cert: bitstring) = m5 in
    let (=trust_identify, =pkey2str(apk_client)) = checksign(ask_client_cert, pk_pca) in
      event server_finish_trust();

  in (controller_server, m6: bitstring);
  let (vid_1:bitstring, server_1:bitstring, prop_1:bitstring, nonce2_1:bitstring) = sdec(m6, ky) in
    event server_recvd();

  if vid_1 <> vid then
    event vid_modified()
  else event vid_unmodified();

  if prop_1 <> prop then
    event prop_modified()
  else event prop_unmodified();

  if server_1 <> iid then
    event server_modified()
  else event server_unmodified();

  new nonce3: bitstring;
  out (server_client, senc((vid_1, prop2meareq(prop_1), nonce3), kz));
  event server_request();


  in (server_client, m7: bitstring);
  let (=vid_1, =prop2meareq(prop_1), M_2:bitstring,  =nonce3, hash_value: bitstring) = checksign(sdec(m7, kz), apk_client) in
    if hash4(vid_1, prop2meareq(prop_1), M_2, nonce3) = hash_value then 
      event server_response();

  if M_2 <> M then
    event M_modified()
  else event M_unmodified();

  (* ------ use this if the Property Certification Module is untrusted ----- *)
  out (server_cert, prop_1);
  in (server_cert, R_1:bitstring);

  out (controller_server, senc(sign((vid_1, iid, prop_1, R_1, nonce2_1, hash5(vid_1, iid, prop_1, R_1, nonce2_1)), sk_server), ky)).


(* -----Attestation Client----- *)

let client_action(sk_client: skey, sk_trust: skey, pk_pca: pkey) =
  new ask_client: skey;
  in (client_pca, sk_client_cert: bitstring);
  let (=client_identify, =pkey2str(pk(sk_client))) = checksign(sk_client_cert, pk_pca) in
    event sk_client_get_cert();

  out (client_pca, sign(pkey2str(pk(ask_client)), sk_trust));

  in (client_pca, ask_client_cert: bitstring);
  let (=trust_identify, =pkey2str(pk(ask_client))) = checksign(ask_client_cert, pk_pca) in
    event ask_client_get_cert();

  in (server_client, m1: bitstring);
  let (pk_server: pkey, sk_server_cert: bitstring) = m1 in
    let (=server_identify, = pkey2str(pk_server)) = checksign(sk_server_cert, pk_pca) in
      event client_start_server();

  out (server_client, (pk(sk_client), sk_client_cert));

  in (server_client, m2: bitstring);
  let y = adec(m2, sk_client) in
    let (kz:key) = str2key(checksign(y, pk_server)) in
      event client_finish_server();
  out (server_client, aenc(sign(key2str(kz), sk_client), pk_server));

  event trust_start_server();
  out (server_client, (pk(ask_client), ask_client_cert));


  in (server_client, m3: bitstring);
  let (vid_1:bitstring, rM_1:bitstring, nonce3_1: bitstring) = sdec(m3, kz) in
    event client_recvd();

  out (server_client, senc(sign((vid_1, rM_1, M, nonce3_1, hash4(vid_1, rM_1, M, nonce3_1)), ask_client), kz));
  event client_response().


query event(R_modified()).

process
  (!pca_action(sk_pca, pk(sk_controller), pk(sk_server), pk(sk_client), pk(sk_trust))) |
  (!client_action(sk_client, sk_trust, pk(sk_pca))) |
  (!server_action(sk_server, pk(sk_pca))) |
  (!cert_action()) | (* ------ use this if the Property Certification Module is untrusted ----- *)
  (!controller_action(sk_controller, pk(sk_pca)))
