type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Xavier Allamigeon, and Vincent Cheval    *
 *                                                           *
 *  Copyright (C) INRIA, LIENS, MPII 2000-2013               *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 114 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  272 (* REPL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* EQUAL *);
  277 (* FUN *);
  278 (* EQUATION *);
  279 (* REDUCTION *);
  280 (* PREDICATE *);
  281 (* PROCESS *);
  282 (* SLASH *);
  283 (* DOT *);
    0 (* EOF *);
  284 (* LET *);
  285 (* QUERY *);
  286 (* BEFORE *);
  287 (* PUTBEGIN *);
  288 (* NONINTERF *);
  289 (* EVENT *);
  290 (* NOT *);
  291 (* ELIMTRUE *);
  292 (* FREE *);
  293 (* SUCHTHAT *);
  294 (* CLAUSES *);
  295 (* RED *);
  296 (* EQUIV *);
  297 (* EQUIVEQ *);
  298 (* WEDGE *);
  299 (* DIFF *);
  300 (* COLON *);
  301 (* NOUNIF *);
  302 (* PHASE *);
  303 (* AMONG *);
  304 (* WEAKSECRET *);
  305 (* PARAM *);
  306 (* ORTEXT *);
  307 (* FAIL *);
  308 (* TYPE *);
  309 (* SET *);
  310 (* FORALL *);
  311 (* CONST *);
  312 (* INJEVENT *);
  313 (* OR *);
  314 (* CHANNEL *);
  315 (* LETFUN *);
  316 (* DEFINE *);
  317 (* EXPAND *);
  318 (* YIELD *);
  319 (* LEQ *);
  320 (* PROBA *);
  321 (* LBRACE *);
  322 (* RBRACE *);
  323 (* PROOF *);
  324 (* EQUIVALENCE *);
  325 (* OTHERWISE *);
  326 (* TABLE *);
  327 (* INSERT *);
  328 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* STRING *);
  271 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\023\000\019\000\019\000\003\000\003\000\008\000\008\000\014\000\
\014\000\012\000\012\000\009\000\009\000\005\000\005\000\004\000\
\004\000\024\000\024\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\026\000\026\000\025\000\
\025\000\027\000\027\000\017\000\017\000\016\000\016\000\028\000\
\028\000\028\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\031\000\031\000\029\000\029\000\032\000\032\000\
\032\000\032\000\030\000\030\000\015\000\015\000\015\000\035\000\
\035\000\036\000\036\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\038\000\038\000\034\000\034\000\039\000\
\039\000\039\000\039\000\037\000\037\000\040\000\040\000\020\000\
\020\000\041\000\041\000\042\000\042\000\006\000\006\000\007\000\
\007\000\043\000\043\000\043\000\043\000\021\000\021\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\045\000\045\000\049\000\
\049\000\046\000\046\000\047\000\047\000\047\000\047\000\047\000\
\050\000\050\000\048\000\048\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\051\000\051\000\044\000\044\000\
\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\007\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\004\000\006\000\004\000\006\000\004\000\004\000\
\006\000\004\000\005\000\004\000\005\000\006\000\004\000\004\000\
\007\000\003\000\009\000\007\000\000\000\004\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\003\000\003\000\000\000\003\000\001\000\005\000\
\003\000\001\000\000\000\003\000\000\000\001\000\001\000\001\000\
\000\000\003\000\001\000\001\000\004\000\006\000\001\000\003\000\
\003\000\004\000\003\000\003\000\003\000\003\000\001\000\001\000\
\000\000\005\000\001\000\003\000\001\000\003\000\001\000\001\000\
\004\000\004\000\004\000\001\000\006\000\003\000\003\000\004\000\
\003\000\003\000\006\000\004\000\004\000\003\000\003\000\005\000\
\002\000\006\000\003\000\001\000\001\000\000\000\006\000\004\000\
\005\000\003\000\001\000\000\000\006\000\006\000\002\000\002\000\
\000\000\002\000\000\000\004\000\006\000\001\000\003\000\005\000\
\002\000\002\000\006\000\003\000\001\000\001\000\000\000\006\000\
\004\000\005\000\003\000\001\000\000\000\003\000\005\000\003\000\
\001\000\003\000\000\000\006\000\005\000\005\000\004\000\006\000\
\004\000\003\000\001\000\003\000\003\000\004\000\003\000\003\000\
\001\000\004\000\002\000\005\000\001\000\001\000\005\000\005\000\
\007\000\007\000\004\000\007\000\004\000\007\000\006\000\007\000\
\009\000\003\000\006\000\003\000\003\000\002\000\000\000\002\000\
\000\000\002\000\000\000\001\000\003\000\003\000\004\000\002\000\
\003\000\001\000\001\000\000\000\004\000\006\000\001\000\003\000\
\003\000\004\000\003\000\003\000\006\000\004\000\006\000\006\000\
\008\000\006\000\008\000\003\000\003\000\001\000\001\000\000\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\217\000\000\000\218\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\109\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\000\000\000\000\119\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\047\000\040\000\041\000\042\000\046\000\044\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\
\166\000\000\000\000\000\000\000\000\000\062\000\063\000\000\000\
\000\000\064\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\095\000\000\000\086\000\
\000\000\000\000\000\000\023\000\084\000\000\000\007\000\000\000\
\026\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\031\000\000\000\073\000\000\000\000\000\144\000\054\000\000\000\
\146\000\000\000\000\000\000\000\000\000\159\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\122\000\
\000\000\000\000\000\000\019\000\024\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\052\000\004\000\000\000\000\000\010\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\115\000\000\000\
\000\000\000\000\089\000\090\000\100\000\096\000\101\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\069\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\158\000\000\000\
\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\215\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\051\000\000\000\160\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\180\000\181\000\000\000\
\000\000\000\000\039\000\000\000\066\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\104\000\000\000\056\000\
\000\000\020\000\082\000\022\000\000\000\025\000\000\000\143\000\
\030\000\000\000\000\000\127\000\000\000\000\000\000\000\132\000\
\000\000\000\000\000\000\018\000\016\000\017\000\000\000\000\000\
\000\000\000\000\212\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\162\000\000\000\000\000\000\000\
\000\000\190\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\152\000\000\000\000\000\099\000\
\000\000\000\000\093\000\000\000\008\000\070\000\033\000\000\000\
\000\000\000\000\000\000\140\000\124\000\000\000\120\000\118\000\
\117\000\005\000\000\000\000\000\213\000\000\000\197\000\000\000\
\000\000\000\000\202\000\000\000\036\000\011\000\167\000\000\000\
\000\000\000\000\000\000\168\000\189\000\193\000\191\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\179\000\175\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\113\000\000\000\125\000\000\000\
\000\000\131\000\015\000\198\000\000\000\000\000\000\000\000\000\
\035\000\170\000\169\000\174\000\172\000\000\000\000\000\176\000\
\000\000\000\000\002\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\138\000\000\000\000\000\000\000\177\000\
\003\000\000\000\136\000\000\000\150\000\000\000\000\000\000\000\
\000\000\148\000"

let yydgoto = "\003\000\
\029\000\030\000\096\000\200\000\201\000\057\002\035\000\068\000\
\036\000\133\000\196\000\210\000\121\001\211\000\075\000\049\000\
\054\000\104\000\178\000\065\000\070\000\179\000\180\000\202\000\
\134\000\135\000\055\000\051\000\105\000\078\001\106\000\079\001\
\013\001\014\001\194\001\155\000\251\001\015\001\252\001\066\000\
\071\000\101\002\152\000\122\001\158\001\020\002\148\001\149\001\
\056\002\150\001\123\001"

let yysindex = "\206\001\
\048\005\048\005\000\000\078\255\135\255\135\255\203\255\026\000\
\087\000\060\000\095\000\021\001\079\001\142\000\146\000\014\255\
\213\000\142\000\219\000\222\000\142\000\142\000\226\000\235\000\
\243\000\250\000\173\000\254\000\000\000\006\255\000\000\016\001\
\003\001\051\002\044\001\051\002\138\000\221\255\050\001\204\002\
\014\001\057\255\048\001\021\255\026\001\064\001\066\001\062\001\
\046\001\056\004\070\001\103\255\073\001\059\001\084\001\186\255\
\095\001\173\003\082\001\051\002\096\255\111\001\000\000\020\002\
\112\001\122\001\124\001\087\001\115\001\048\005\051\002\025\255\
\120\001\126\001\113\001\132\001\044\001\044\001\119\001\116\001\
\136\001\033\000\163\001\166\001\141\001\204\255\168\001\213\004\
\213\004\020\255\146\001\167\001\189\001\024\001\142\000\169\001\
\191\001\020\255\172\001\003\001\213\004\204\002\190\001\045\255\
\196\001\000\000\198\001\204\002\020\255\182\001\161\001\175\001\
\204\002\204\002\204\002\008\001\048\005\204\002\204\002\204\002\
\204\002\204\002\008\001\203\001\199\001\048\005\199\001\020\255\
\048\005\204\002\048\005\051\002\124\255\219\001\000\000\051\002\
\020\255\051\002\051\002\048\005\051\002\051\002\051\002\051\002\
\115\001\142\000\020\255\186\001\222\001\000\000\212\003\008\000\
\114\003\220\001\000\000\216\001\250\255\048\005\048\005\212\001\
\217\001\255\255\020\255\048\005\003\001\232\004\020\255\020\255\
\048\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\185\001\204\255\254\001\020\255\213\004\252\001\007\002\
\013\002\014\002\000\000\240\004\232\004\217\255\009\002\012\002\
\000\000\010\002\011\002\010\000\176\004\000\000\000\000\030\002\
\043\002\000\000\000\000\051\002\042\002\048\005\051\002\055\002\
\048\005\064\002\000\000\176\255\050\255\204\002\000\000\038\000\
\078\002\053\002\204\002\142\000\142\000\079\002\131\255\081\002\
\060\002\000\000\046\002\071\003\185\255\000\000\071\003\000\000\
\051\002\045\002\067\002\000\000\000\000\094\002\000\000\018\004\
\000\000\018\000\051\002\000\000\095\002\054\002\166\255\052\002\
\000\000\229\255\000\000\157\004\218\003\000\000\000\000\044\001\
\000\000\051\002\051\002\051\002\146\000\000\000\097\002\088\002\
\114\003\092\002\102\002\098\002\104\002\107\002\000\000\000\000\
\114\003\031\255\086\002\000\000\000\000\048\005\048\005\093\002\
\109\002\044\001\000\000\112\002\125\002\232\004\124\002\136\002\
\232\004\217\255\148\002\061\004\153\002\155\002\000\000\048\005\
\000\000\204\255\156\002\225\000\131\002\232\004\232\004\232\004\
\016\255\161\002\090\002\205\000\101\255\232\004\139\002\158\002\
\132\000\170\002\176\002\177\002\213\004\000\000\011\000\141\002\
\020\255\049\000\000\000\000\000\019\255\044\001\000\000\168\002\
\048\005\204\002\000\000\171\002\178\002\189\002\000\000\151\002\
\003\001\239\255\000\000\000\000\000\000\000\000\000\000\048\005\
\194\002\048\005\175\002\048\005\051\002\000\000\000\000\152\002\
\000\000\048\005\200\002\157\004\157\004\157\004\000\000\114\003\
\000\000\225\002\227\002\114\003\214\002\114\003\193\002\235\002\
\048\005\000\000\000\000\048\005\048\005\231\002\241\002\232\004\
\069\000\001\003\000\000\221\002\232\004\039\003\234\002\252\002\
\232\004\232\004\048\005\232\004\232\004\232\004\209\002\248\002\
\000\000\000\000\250\002\000\000\020\255\082\000\114\000\022\003\
\016\003\213\004\105\255\032\003\036\003\000\000\205\000\020\255\
\147\000\232\004\232\004\232\004\213\004\000\000\000\000\232\004\
\205\000\161\002\000\000\020\255\000\000\048\005\135\255\015\003\
\213\004\000\000\017\001\204\002\024\003\000\000\030\003\000\000\
\204\002\000\000\000\000\000\000\048\005\000\000\040\255\000\000\
\000\000\048\005\049\003\000\000\162\000\048\003\114\003\000\000\
\043\003\064\003\250\255\000\000\000\000\000\000\048\005\232\004\
\156\000\232\004\000\000\020\255\063\003\232\004\232\004\232\004\
\044\000\004\003\000\000\120\000\000\000\159\004\048\005\048\005\
\048\005\170\002\232\004\205\000\000\000\213\004\040\000\020\255\
\205\000\000\000\065\003\053\002\008\002\147\002\070\003\161\002\
\090\003\095\003\191\255\000\000\000\000\048\005\177\255\000\000\
\194\000\204\002\000\000\056\004\000\000\000\000\000\000\114\003\
\082\003\102\003\123\003\000\000\000\000\113\003\000\000\000\000\
\000\000\000\000\000\005\232\004\000\000\127\003\000\000\144\002\
\186\002\008\003\000\000\078\003\000\000\000\000\000\000\186\000\
\145\003\161\002\213\004\000\000\000\000\000\000\000\000\213\004\
\213\004\170\002\170\002\145\255\146\000\124\003\000\000\048\005\
\038\000\149\001\146\003\114\003\134\003\000\000\114\003\048\005\
\033\001\232\004\232\004\232\004\232\004\048\005\170\002\170\002\
\161\002\040\000\040\000\000\000\000\000\213\004\232\004\137\003\
\044\001\051\002\048\005\000\000\000\000\038\000\000\000\152\003\
\114\003\000\000\000\000\000\000\159\004\159\004\042\003\044\003\
\000\000\000\000\000\000\000\000\000\000\161\002\117\003\000\000\
\135\003\170\004\000\000\000\000\162\000\159\003\232\004\232\004\
\137\003\048\005\051\002\000\000\162\000\159\004\159\004\000\000\
\000\000\030\255\000\000\146\000\000\000\051\002\220\004\051\002\
\030\255\000\000"

let yyrindex = "\000\000\
\027\255\171\004\000\000\000\000\009\003\009\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\153\003\000\000\153\003\000\000\000\000\178\003\
\000\000\042\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\158\003\151\255\000\000\000\000\160\003\000\000\
\000\000\000\000\000\000\189\003\011\005\000\000\000\000\000\000\
\000\000\187\003\149\255\000\000\000\000\002\000\000\000\170\003\
\000\000\000\000\000\000\000\000\153\003\153\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\207\003\000\000\000\000\128\004\000\000\000\000\000\000\
\000\000\207\003\000\000\209\003\000\000\000\000\029\255\213\003\
\000\000\000\000\006\005\178\003\000\000\000\000\000\000\000\000\
\178\003\000\000\178\003\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\207\003\
\002\000\000\000\002\000\000\000\214\003\000\000\000\000\189\003\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\215\003\000\000\000\000\000\000\000\000\002\000\002\000\000\000\
\000\000\000\000\000\000\002\000\209\003\000\000\207\003\207\003\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\255\151\003\207\003\000\000\000\000\000\000\
\000\000\240\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\220\003\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\216\003\
\000\000\111\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\002\117\001\107\001\000\000\114\005\000\000\
\000\000\151\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\255\000\000\126\000\
\000\000\193\255\000\000\249\255\000\000\000\000\000\000\153\003\
\000\000\000\000\000\000\000\000\118\003\000\000\000\000\000\000\
\215\003\000\000\003\002\000\000\221\003\000\000\000\000\000\000\
\000\000\170\003\000\000\000\000\000\000\002\000\002\000\000\000\
\000\000\153\003\000\000\000\000\000\000\223\003\000\000\242\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\003\
\240\002\021\003\000\000\224\003\211\003\000\000\000\000\000\000\
\061\003\169\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\170\000\000\000\000\000\153\255\153\003\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\032\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\002\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\056\000\086\000\119\000\000\000\000\000\
\000\000\000\000\179\003\215\003\000\000\000\000\193\000\000\000\
\002\000\000\000\000\000\002\000\002\000\000\000\000\000\000\000\
\232\003\000\000\000\000\000\000\223\003\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\001\234\003\000\000\000\000\224\003\000\000\
\012\001\000\000\000\000\223\003\000\000\000\000\000\000\223\003\
\224\003\093\003\000\000\000\000\000\000\002\000\009\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\242\003\000\000\000\000\000\000\
\000\000\170\003\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\090\001\000\000\138\001\000\000\170\001\191\003\002\000\
\002\000\169\000\000\000\000\000\000\000\000\000\148\004\000\000\
\000\000\000\000\000\000\026\255\130\003\162\003\000\000\194\003\
\000\000\000\000\153\003\000\000\000\000\002\000\000\000\000\000\
\255\003\000\000\000\000\237\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\231\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\169\000\169\000\007\004\118\003\000\000\000\000\002\000\
\000\000\000\004\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\002\000\169\000\169\000\
\039\004\148\004\148\004\000\000\000\000\000\000\000\000\079\004\
\153\003\000\000\002\000\000\000\000\000\000\000\000\000\009\004\
\000\000\000\000\000\000\000\000\210\001\242\001\138\002\208\002\
\000\000\000\000\000\000\000\000\000\000\111\004\007\004\000\000\
\000\000\000\000\000\000\000\000\000\000\020\004\000\000\000\000\
\079\004\002\000\000\000\000\000\000\000\026\002\063\002\000\000\
\000\000\057\000\000\000\118\003\000\000\000\000\000\000\000\000\
\103\000\000\000"

let yygindex = "\000\000\
\000\000\006\000\222\255\173\255\159\255\000\000\103\003\046\000\
\020\005\243\255\192\255\119\004\106\255\253\255\104\255\185\000\
\164\001\248\255\243\003\201\255\025\004\000\000\108\004\227\003\
\152\004\094\000\000\000\000\000\039\001\000\000\075\004\110\254\
\038\255\013\255\000\000\101\003\000\000\188\003\011\254\000\000\
\245\253\192\002\000\000\234\254\217\254\112\254\083\255\211\255\
\236\002\088\003\116\003"

let yytablesize = 1680
let yytable = "\064\000\
\050\000\037\000\099\000\058\000\019\001\048\000\053\000\031\000\
\057\000\062\001\163\001\218\000\074\000\149\000\208\000\036\001\
\056\001\058\002\159\001\048\001\094\000\106\001\097\000\048\000\
\197\000\144\001\072\000\167\001\153\000\092\000\088\000\092\000\
\198\000\092\000\153\000\092\000\212\000\092\000\051\001\246\000\
\092\000\073\000\160\000\161\000\238\000\189\000\246\001\214\000\
\092\000\000\001\154\000\037\000\074\001\111\000\112\001\092\000\
\154\000\151\000\092\000\139\000\108\000\142\000\057\000\077\000\
\118\000\026\001\080\000\081\000\109\000\118\000\092\000\092\000\
\142\000\089\000\119\000\150\000\112\000\199\000\145\001\119\000\
\048\000\141\000\142\000\037\001\038\001\092\000\120\000\121\000\
\102\002\254\000\032\000\120\000\121\000\213\000\037\000\092\002\
\143\000\043\001\100\002\136\000\109\000\122\000\205\001\099\002\
\151\001\223\000\122\000\050\000\151\001\227\000\228\000\229\000\
\230\000\231\000\050\000\057\000\128\001\044\001\242\000\057\000\
\190\001\240\000\226\000\050\001\247\000\248\000\243\000\250\000\
\251\000\252\000\253\000\236\000\063\001\231\001\239\000\086\001\
\241\000\233\001\126\001\137\000\205\000\187\001\061\002\139\000\
\152\001\249\000\109\000\057\000\224\001\124\000\118\000\142\001\
\143\001\083\000\055\000\055\000\054\002\055\000\153\000\153\001\
\119\000\076\002\077\002\020\001\021\001\141\000\142\000\080\002\
\183\000\027\001\097\001\084\002\120\000\121\000\039\001\055\000\
\142\000\083\000\015\002\153\000\143\000\055\002\142\000\061\001\
\061\001\139\000\055\001\122\000\033\000\128\000\066\001\255\000\
\055\000\069\001\072\000\076\000\095\000\076\000\076\000\076\000\
\096\002\076\000\073\001\032\002\118\000\170\000\171\000\141\000\
\142\000\072\000\082\001\068\001\129\000\029\002\071\001\037\000\
\172\000\173\000\174\000\076\000\052\001\099\001\143\000\175\000\
\100\000\201\001\120\000\121\000\254\001\053\001\176\000\076\000\
\076\000\076\000\209\001\210\001\054\001\212\001\213\001\214\001\
\101\000\199\000\052\002\053\002\100\001\101\001\102\001\118\001\
\139\000\076\000\177\001\075\000\162\001\075\000\075\000\075\000\
\177\000\075\000\118\000\229\001\230\001\076\000\018\001\074\002\
\075\002\083\001\084\001\024\001\119\000\025\001\141\000\142\000\
\005\001\061\001\061\001\075\000\093\001\073\000\088\000\155\000\
\120\000\121\000\037\000\114\001\115\001\035\002\127\001\075\000\
\075\000\075\000\006\001\168\001\165\000\139\000\038\000\122\000\
\088\000\155\000\001\002\218\001\225\000\137\001\017\002\061\001\
\011\002\003\002\076\001\232\000\166\000\077\001\228\001\008\002\
\009\002\010\002\019\002\141\000\142\000\075\000\151\000\130\001\
\154\000\171\001\235\001\037\000\016\002\037\000\089\001\202\001\
\052\000\064\002\143\000\166\001\066\002\176\001\170\001\183\001\
\094\001\223\001\154\000\151\000\219\001\132\001\133\001\039\000\
\130\001\200\000\040\000\142\000\232\001\178\001\156\000\180\001\
\041\000\182\001\072\000\042\000\134\001\130\001\086\002\185\001\
\239\001\227\001\006\002\056\000\149\000\041\002\132\001\133\001\
\156\000\072\000\043\000\234\001\220\001\044\000\196\001\045\000\
\046\000\197\001\198\001\132\001\133\001\134\001\021\002\157\000\
\072\000\149\000\072\000\072\000\072\000\130\001\072\000\156\001\
\211\001\204\000\134\001\130\001\157\001\098\000\047\000\095\000\
\072\000\157\000\217\000\069\002\070\002\071\002\072\002\222\000\
\072\000\224\000\067\000\132\001\133\001\018\002\004\002\072\000\
\079\002\132\001\133\001\241\001\072\000\072\000\072\000\072\000\
\244\001\203\000\134\001\236\001\183\000\183\000\249\001\130\001\
\183\000\250\001\183\000\183\000\183\000\183\000\072\000\183\000\
\183\000\183\000\245\001\183\000\132\001\133\001\047\002\247\001\
\094\002\095\002\072\000\183\000\183\000\132\001\133\001\069\000\
\030\002\183\000\033\002\134\001\002\002\130\001\001\000\002\000\
\052\001\205\000\049\002\072\000\134\001\118\000\183\000\050\002\
\051\002\147\001\121\000\121\000\012\002\013\002\014\002\119\000\
\054\001\076\000\072\000\132\001\133\001\140\001\183\000\078\000\
\061\001\034\002\079\000\120\000\121\000\086\000\082\000\183\000\
\183\000\207\000\134\001\031\002\199\000\078\002\199\000\083\000\
\199\000\199\000\122\000\199\000\199\000\199\000\199\000\084\000\
\199\000\199\000\199\000\199\000\199\000\199\000\085\000\188\000\
\039\000\188\000\087\000\040\000\199\000\199\000\192\000\091\000\
\192\000\041\000\199\000\090\000\103\000\039\000\081\002\240\001\
\040\000\211\000\107\000\199\000\199\000\113\000\041\000\199\000\
\235\000\042\000\237\000\043\000\118\000\060\002\044\000\068\002\
\045\000\046\000\199\000\204\000\082\002\067\002\119\000\199\000\
\043\000\095\000\092\000\073\002\130\001\045\000\046\000\102\000\
\199\000\199\000\120\000\121\000\110\000\092\000\209\000\047\000\
\083\002\141\000\142\000\114\000\092\000\115\000\116\000\092\000\
\117\000\122\000\132\001\133\001\047\000\098\002\123\000\059\000\
\143\000\125\000\060\000\092\000\092\000\126\000\127\000\132\000\
\103\002\134\001\105\002\061\000\200\000\200\000\200\000\097\002\
\200\000\200\000\092\000\200\000\200\000\200\000\200\000\130\000\
\200\000\200\000\200\000\200\000\200\000\098\000\206\000\098\000\
\062\000\098\000\138\000\098\000\200\000\200\000\098\000\102\000\
\144\000\102\000\200\000\102\000\145\000\102\000\146\000\148\000\
\102\000\063\000\147\000\200\000\156\000\098\000\157\000\200\000\
\098\000\210\000\162\000\158\000\204\000\204\000\204\000\102\000\
\204\000\204\000\200\000\204\000\204\000\204\000\204\000\200\000\
\204\000\204\000\204\000\204\000\204\000\062\002\159\000\163\000\
\200\000\200\000\164\000\098\000\204\000\204\000\167\000\169\000\
\118\000\168\000\204\000\181\000\203\000\203\000\203\000\203\000\
\203\000\203\000\119\000\203\000\203\000\203\000\203\000\204\000\
\203\000\203\000\203\000\203\000\203\000\109\000\120\000\121\000\
\136\000\108\000\204\000\206\000\203\000\203\000\209\000\204\000\
\215\000\219\000\203\000\216\000\220\000\122\000\233\000\208\000\
\204\000\204\000\207\000\234\000\205\000\205\000\205\000\203\000\
\205\000\205\000\221\000\205\000\205\000\205\000\205\000\244\000\
\205\000\205\000\205\000\205\000\205\000\137\000\001\001\203\000\
\141\000\142\000\016\001\017\001\205\000\205\000\022\001\161\000\
\203\000\203\000\205\000\023\001\207\000\207\000\207\000\143\000\
\207\000\207\000\040\001\207\000\207\000\207\000\207\000\205\000\
\207\000\207\000\207\000\207\000\207\000\126\000\042\001\126\000\
\045\001\126\000\046\001\126\000\207\000\207\000\126\000\205\000\
\047\001\048\001\207\000\024\002\163\000\057\001\059\001\060\001\
\205\000\205\000\058\001\130\001\211\000\211\000\211\000\207\000\
\211\000\211\000\064\001\211\000\211\000\211\000\211\000\139\000\
\211\000\211\000\211\000\211\000\211\000\065\001\140\000\207\000\
\067\001\132\001\133\001\059\000\211\000\211\000\060\000\081\001\
\207\000\207\000\211\000\070\001\183\000\141\000\142\000\093\000\
\134\001\209\000\209\000\209\000\072\001\209\000\209\000\211\000\
\209\000\209\000\209\000\209\000\143\000\209\000\209\000\209\000\
\209\000\209\000\080\001\085\001\062\000\087\001\088\001\211\000\
\121\000\209\000\209\000\124\000\178\000\090\001\142\000\209\000\
\211\000\211\000\091\001\095\001\105\001\063\000\104\001\096\001\
\107\001\108\001\110\001\146\001\209\000\130\001\109\001\111\001\
\113\001\206\000\206\000\206\000\119\001\206\000\206\000\116\001\
\206\000\206\000\206\000\206\000\209\000\206\000\206\000\206\000\
\206\000\173\000\120\001\132\001\133\001\209\000\209\000\117\001\
\124\001\206\000\206\000\125\001\210\000\210\000\210\000\206\000\
\210\000\210\000\134\001\210\000\210\000\210\000\210\000\129\001\
\210\000\210\000\210\000\210\000\206\000\135\001\025\002\136\001\
\139\001\171\000\043\002\130\001\210\000\210\000\130\001\094\000\
\061\001\094\000\210\000\094\000\206\000\094\000\141\001\154\001\
\094\000\155\001\157\001\160\001\161\001\206\000\206\000\210\000\
\164\001\132\001\133\001\169\001\132\001\133\001\172\001\094\000\
\173\001\182\000\094\000\174\001\175\001\044\002\179\001\210\000\
\134\001\181\001\184\001\134\001\039\000\130\001\094\000\040\000\
\210\000\210\000\208\000\208\000\208\000\041\000\208\000\208\000\
\103\000\208\000\208\000\208\000\208\000\094\000\208\000\208\000\
\208\000\208\000\186\001\132\001\133\001\188\001\164\000\043\000\
\189\001\191\001\208\000\208\000\045\000\046\000\193\001\106\000\
\208\000\106\000\134\001\106\000\161\000\106\000\195\001\161\000\
\106\000\161\000\161\000\161\000\161\000\208\000\161\000\161\000\
\161\000\199\001\161\000\047\000\200\001\203\001\185\000\106\000\
\204\001\061\000\161\000\161\000\061\000\208\000\207\001\208\001\
\161\000\215\001\216\001\045\002\217\001\061\000\208\000\208\000\
\163\000\163\000\221\001\130\001\222\001\161\000\163\000\163\000\
\163\000\163\000\225\001\163\000\163\000\163\000\186\000\163\000\
\226\001\238\001\061\000\242\001\243\001\161\000\133\001\163\000\
\163\000\132\001\133\001\248\001\253\001\163\000\161\000\161\000\
\206\001\255\001\130\001\061\000\087\002\130\001\088\002\130\001\
\134\001\183\000\163\000\007\002\183\000\023\002\183\000\183\000\
\183\000\183\000\026\002\183\000\183\000\183\000\187\000\183\000\
\132\001\133\001\163\000\132\001\133\001\132\001\133\001\183\000\
\183\000\154\000\118\000\163\000\163\000\183\000\027\002\134\001\
\178\000\178\000\134\001\028\002\134\001\036\002\178\000\178\000\
\178\000\178\000\183\000\178\000\178\000\178\000\184\000\178\000\
\120\000\121\000\007\001\008\001\037\002\009\001\147\000\178\000\
\178\000\147\000\183\000\010\001\039\002\178\000\011\001\122\000\
\054\002\038\002\147\000\183\000\183\000\173\000\173\000\042\002\
\130\001\173\000\178\000\173\000\173\000\012\001\173\000\046\002\
\173\000\173\000\173\000\187\000\173\000\048\002\059\002\147\000\
\063\002\065\002\178\000\019\002\173\000\173\000\132\001\133\001\
\085\002\090\002\173\000\178\000\178\000\171\000\171\000\093\002\
\147\000\171\000\037\000\171\000\171\000\134\001\171\000\173\000\
\171\000\171\000\171\000\053\000\171\000\129\000\110\000\129\000\
\087\000\129\000\085\000\129\000\171\000\171\000\129\000\173\000\
\118\000\081\000\171\000\145\000\123\000\182\000\182\000\131\000\
\173\000\173\000\119\000\182\000\182\000\182\000\182\000\171\000\
\182\000\182\000\182\000\065\000\182\000\059\000\120\000\121\000\
\050\000\108\000\079\000\135\000\182\000\182\000\116\000\171\000\
\067\000\133\000\182\000\216\000\196\000\122\000\188\000\139\000\
\171\000\171\000\164\000\164\000\214\000\139\000\194\000\182\000\
\164\000\164\000\164\000\164\000\098\001\164\000\164\000\164\000\
\141\000\164\000\002\001\003\001\004\001\141\000\142\000\182\000\
\037\000\164\000\164\000\141\000\142\000\114\000\112\000\164\000\
\182\000\182\000\185\000\185\000\143\000\237\001\185\000\139\000\
\185\000\185\000\143\000\185\000\164\000\185\000\185\000\185\000\
\034\000\185\000\137\000\028\001\138\001\103\001\041\001\245\000\
\075\001\185\000\185\000\165\001\164\000\118\000\000\002\185\000\
\106\002\192\001\186\000\186\000\092\001\164\000\164\000\119\000\
\186\000\186\000\186\000\186\000\185\000\186\000\186\000\186\000\
\022\002\186\000\089\002\120\000\121\000\005\002\000\000\000\000\
\000\000\186\000\186\000\000\000\185\000\000\000\000\000\186\000\
\000\000\000\000\122\000\118\000\000\000\185\000\185\000\000\000\
\130\001\000\000\187\000\187\000\186\000\119\000\187\000\131\001\
\187\000\187\000\187\000\187\000\000\000\187\000\187\000\187\000\
\000\000\120\000\121\000\000\000\186\000\000\000\132\001\133\001\
\000\000\187\000\187\000\000\000\000\000\186\000\186\000\187\000\
\122\000\000\000\184\000\184\000\000\000\134\001\000\000\000\000\
\184\000\184\000\184\000\184\000\187\000\184\000\184\000\184\000\
\000\000\184\000\071\000\000\000\071\000\071\000\071\000\000\000\
\071\000\184\000\184\000\000\000\187\000\000\000\000\000\184\000\
\000\000\000\000\000\000\071\000\000\000\187\000\187\000\187\000\
\187\000\000\000\071\000\000\000\184\000\187\000\187\000\187\000\
\187\000\000\000\187\000\187\000\187\000\000\000\071\000\071\000\
\071\000\071\000\071\000\000\000\184\000\000\000\187\000\187\000\
\139\000\000\000\130\001\182\000\187\000\184\000\184\000\061\001\
\071\000\183\000\184\000\185\000\186\000\091\002\187\000\188\000\
\189\000\187\000\000\000\000\000\071\000\000\000\141\000\142\000\
\132\001\133\001\000\000\190\000\000\000\000\000\000\000\000\000\
\191\000\187\000\000\000\141\000\142\000\143\000\000\000\134\001\
\182\000\000\000\187\000\187\000\000\000\192\000\183\000\184\000\
\185\000\186\000\143\000\187\000\188\000\189\000\000\000\000\000\
\029\001\000\000\000\000\030\001\000\000\193\000\000\000\104\002\
\190\000\031\001\000\000\182\000\032\001\191\000\194\000\195\000\
\033\001\183\000\184\000\185\000\049\001\000\000\187\000\188\000\
\189\000\000\000\192\000\034\001\000\000\141\000\142\000\000\000\
\105\000\035\001\105\000\190\000\105\000\000\000\105\000\000\000\
\191\000\105\000\193\000\130\001\143\000\000\000\000\000\000\000\
\000\000\105\000\040\002\194\000\195\000\192\000\071\000\000\000\
\105\000\000\000\091\000\105\000\091\000\071\000\091\000\000\000\
\091\000\132\001\133\001\091\000\000\000\193\000\000\000\105\000\
\105\000\000\000\000\000\091\000\071\000\071\000\194\000\195\000\
\134\001\000\000\091\000\000\000\000\000\091\000\105\000\000\000\
\000\000\000\000\000\000\071\000\004\000\005\000\006\000\007\000\
\000\000\091\000\091\000\008\000\009\000\000\000\000\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\000\000\000\000\
\091\000\000\000\000\000\000\000\016\000\000\000\000\000\017\000\
\018\000\000\000\000\000\019\000\020\000\000\000\021\000\000\000\
\000\000\022\000\023\000\024\000\025\000\000\000\000\000\026\000\
\000\000\000\000\027\000\000\000\097\000\028\000\097\000\000\000\
\097\000\000\000\097\000\000\000\000\000\097\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\000\000\000\000\097\000"

let yycheck = "\013\000\
\009\000\000\000\037\000\012\000\157\000\009\000\010\000\002\000\
\012\000\000\000\000\000\109\000\016\000\069\000\098\000\166\000\
\190\000\029\002\058\001\004\001\034\000\009\001\036\000\009\001\
\089\000\048\001\013\001\009\001\004\001\033\000\025\001\003\001\
\013\001\005\001\004\001\007\001\101\000\009\001\189\000\137\000\
\012\001\028\001\077\000\078\000\128\000\020\001\007\001\003\001\
\020\001\147\000\026\001\025\001\003\001\033\001\017\001\027\001\
\026\001\071\000\030\001\020\001\004\001\043\001\037\001\018\000\
\020\001\163\000\021\000\022\000\044\001\020\001\042\001\043\001\
\043\001\068\001\030\001\070\000\056\001\058\001\063\001\030\001\
\066\001\042\001\043\001\167\000\168\000\057\001\042\001\043\001\
\100\002\145\000\013\001\042\001\043\001\102\000\068\001\085\002\
\057\001\181\000\069\001\004\001\044\001\057\001\125\001\093\002\
\004\001\114\000\057\001\116\000\004\001\118\000\119\000\120\000\
\121\000\122\000\123\000\005\001\034\001\182\000\132\000\009\001\
\108\001\130\000\117\000\188\000\138\000\139\000\003\001\141\000\
\142\000\143\000\144\000\126\000\197\000\156\001\129\000\005\001\
\131\000\160\001\033\001\044\001\095\000\104\001\033\002\020\001\
\044\001\140\000\044\001\037\001\044\001\047\001\020\001\046\001\
\047\001\003\001\006\001\007\001\012\001\009\001\006\001\054\001\
\030\001\050\002\051\002\158\000\159\000\042\001\043\001\056\002\
\000\000\164\000\005\001\062\002\042\001\043\001\169\000\027\001\
\003\001\027\001\218\001\027\001\057\001\037\001\009\001\008\001\
\008\001\020\001\190\000\057\001\054\001\004\001\204\000\146\000\
\044\001\207\000\042\001\003\001\006\001\005\001\006\001\007\001\
\089\002\009\001\027\001\027\001\020\001\002\001\003\001\042\001\
\043\001\057\001\219\000\206\000\027\001\023\001\209\000\013\001\
\013\001\014\001\015\001\027\001\004\001\000\001\057\001\020\001\
\004\001\120\001\042\001\043\001\191\001\013\001\027\001\039\001\
\040\001\041\001\129\001\130\001\020\001\132\001\133\001\134\001\
\020\001\000\000\026\002\027\002\002\001\003\001\004\001\026\001\
\020\001\057\001\012\001\003\001\061\001\005\001\006\001\007\001\
\053\001\009\001\020\001\154\001\155\001\069\001\013\001\047\002\
\048\002\220\000\221\000\013\001\030\001\015\001\042\001\043\001\
\009\001\008\001\008\001\027\001\003\001\028\001\009\001\009\001\
\042\001\043\001\025\001\022\001\023\001\248\001\034\001\039\001\
\040\001\041\001\027\001\070\001\004\001\020\001\013\001\057\001\
\027\001\027\001\195\001\141\001\116\000\040\001\220\001\008\001\
\005\001\200\001\013\001\123\000\020\001\016\001\152\001\206\001\
\207\001\208\001\019\001\042\001\043\001\069\001\006\001\020\001\
\009\001\074\001\164\001\066\001\219\001\068\001\233\000\003\001\
\013\001\036\002\057\001\027\001\039\002\081\001\073\001\093\001\
\243\000\146\001\027\001\027\001\003\001\042\001\043\001\001\001\
\020\001\000\000\004\001\043\001\157\001\088\001\009\001\090\001\
\010\001\092\001\042\001\013\001\057\001\020\001\065\002\098\001\
\169\001\151\001\204\001\013\001\006\001\004\002\042\001\043\001\
\027\001\057\001\028\001\161\001\003\001\031\001\113\001\033\001\
\034\001\116\001\117\001\042\001\043\001\057\001\224\001\009\001\
\003\001\027\001\005\001\006\001\007\001\020\001\009\001\004\001\
\131\001\000\000\057\001\020\001\009\001\004\001\056\001\006\001\
\042\001\027\001\108\000\042\002\043\002\044\002\045\002\113\000\
\027\001\115\000\013\001\042\001\043\001\222\001\003\001\057\001\
\055\002\042\001\043\001\172\001\039\001\040\001\041\001\042\001\
\177\001\000\000\057\001\166\001\004\001\005\001\013\001\020\001\
\008\001\016\001\010\001\011\001\012\001\013\001\057\001\015\001\
\016\001\017\001\181\001\019\001\042\001\043\001\005\001\186\001\
\087\002\088\002\069\001\027\001\028\001\042\001\043\001\054\001\
\235\001\033\001\009\001\057\001\199\001\020\001\001\000\002\000\
\004\001\000\000\019\002\042\001\057\001\020\001\046\001\024\002\
\025\002\013\001\026\001\027\001\215\001\216\001\217\001\030\001\
\020\001\013\001\057\001\042\001\043\001\005\001\062\001\013\001\
\008\001\242\001\013\001\042\001\043\001\065\001\013\001\071\001\
\072\001\000\000\057\001\238\001\003\001\054\002\005\001\013\001\
\007\001\008\001\057\001\010\001\011\001\012\001\013\001\013\001\
\015\001\016\001\017\001\018\001\019\001\020\001\013\001\003\001\
\001\001\005\001\013\001\004\001\027\001\028\001\003\001\013\001\
\005\001\010\001\033\001\004\001\013\001\001\001\057\002\007\001\
\004\001\000\000\013\001\042\001\043\001\004\001\010\001\046\001\
\125\000\013\001\127\000\028\001\020\001\032\002\031\001\007\001\
\033\001\034\001\057\001\020\001\058\002\040\002\030\001\062\001\
\028\001\006\001\009\001\046\002\020\001\033\001\034\001\006\001\
\071\001\072\001\042\001\043\001\013\001\020\001\000\000\056\001\
\059\002\042\001\043\001\004\001\027\001\004\001\009\001\030\001\
\027\001\057\001\042\001\043\001\056\001\091\002\009\001\001\001\
\057\001\009\001\004\001\042\001\043\001\027\001\003\001\006\001\
\102\002\057\001\104\002\013\001\003\001\004\001\005\001\090\002\
\007\001\008\001\057\001\010\001\011\001\012\001\013\001\009\001\
\015\001\016\001\017\001\018\001\019\001\003\001\000\000\005\001\
\034\001\007\001\004\001\009\001\027\001\028\001\012\001\003\001\
\009\001\005\001\033\001\007\001\003\001\009\001\003\001\013\001\
\012\001\051\001\044\001\042\001\013\001\027\001\009\001\046\001\
\030\001\000\000\020\001\027\001\003\001\004\001\005\001\027\001\
\007\001\008\001\057\001\010\001\011\001\012\001\013\001\062\001\
\015\001\016\001\017\001\018\001\019\001\009\001\027\001\044\001\
\071\001\072\001\027\001\057\001\027\001\028\001\004\001\027\001\
\020\001\004\001\033\001\004\001\003\001\004\001\005\001\009\001\
\007\001\008\001\030\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\018\001\019\001\044\001\042\001\043\001\
\004\001\004\001\057\001\027\001\027\001\028\001\027\001\062\001\
\005\001\020\001\033\001\006\001\044\001\057\001\004\001\000\000\
\071\001\072\001\020\001\013\001\003\001\004\001\005\001\046\001\
\007\001\008\001\044\001\010\001\011\001\012\001\013\001\005\001\
\015\001\016\001\017\001\018\001\019\001\044\001\009\001\062\001\
\042\001\043\001\015\001\020\001\027\001\028\001\027\001\000\000\
\071\001\072\001\033\001\027\001\003\001\004\001\005\001\057\001\
\007\001\008\001\066\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\018\001\019\001\003\001\009\001\005\001\
\013\001\007\001\004\001\009\001\027\001\028\001\012\001\062\001\
\004\001\004\001\033\001\012\001\000\000\013\001\013\001\013\001\
\071\001\072\001\015\001\020\001\003\001\004\001\005\001\046\001\
\007\001\008\001\005\001\010\001\011\001\012\001\013\001\020\001\
\015\001\016\001\017\001\018\001\019\001\003\001\027\001\062\001\
\007\001\042\001\043\001\001\001\027\001\028\001\004\001\003\001\
\071\001\072\001\033\001\005\001\000\000\042\001\043\001\013\001\
\057\001\003\001\004\001\005\001\005\001\007\001\008\001\046\001\
\010\001\011\001\012\001\013\001\057\001\015\001\016\001\017\001\
\018\001\019\001\005\001\005\001\034\001\005\001\027\001\062\001\
\043\001\027\001\028\001\047\001\000\000\027\001\043\001\033\001\
\071\001\072\001\005\001\005\001\013\001\051\001\006\001\050\001\
\013\001\004\001\003\001\018\001\046\001\020\001\013\001\005\001\
\027\001\003\001\004\001\005\001\005\001\007\001\008\001\027\001\
\010\001\011\001\012\001\013\001\062\001\015\001\016\001\017\001\
\018\001\000\000\006\001\042\001\043\001\071\001\072\001\027\001\
\013\001\027\001\028\001\004\001\003\001\004\001\005\001\033\001\
\007\001\008\001\057\001\010\001\011\001\012\001\013\001\004\001\
\015\001\016\001\017\001\018\001\046\001\005\001\012\001\005\001\
\005\001\000\000\019\001\020\001\027\001\028\001\020\001\003\001\
\008\001\005\001\033\001\007\001\062\001\009\001\044\001\037\001\
\012\001\020\001\009\001\004\001\004\001\071\001\072\001\046\001\
\044\001\042\001\043\001\020\001\042\001\043\001\020\001\027\001\
\015\001\000\000\030\001\007\001\046\001\012\001\005\001\062\001\
\057\001\027\001\051\001\057\001\001\001\020\001\042\001\004\001\
\071\001\072\001\003\001\004\001\005\001\010\001\007\001\008\001\
\013\001\010\001\011\001\012\001\013\001\057\001\015\001\016\001\
\017\001\018\001\027\001\042\001\043\001\005\001\000\000\028\001\
\006\001\020\001\027\001\028\001\033\001\034\001\046\001\003\001\
\033\001\005\001\057\001\007\001\005\001\009\001\012\001\008\001\
\012\001\010\001\011\001\012\001\013\001\046\001\015\001\016\001\
\017\001\027\001\019\001\056\001\020\001\005\001\000\000\027\001\
\044\001\001\001\027\001\028\001\004\001\062\001\037\001\020\001\
\033\001\065\001\027\001\012\001\027\001\013\001\071\001\072\001\
\004\001\005\001\005\001\020\001\013\001\046\001\010\001\011\001\
\012\001\013\001\003\001\015\001\016\001\017\001\000\000\019\001\
\005\001\027\001\034\001\020\001\015\001\062\001\043\001\027\001\
\028\001\042\001\043\001\003\001\005\001\033\001\071\001\072\001\
\018\001\015\001\020\001\051\001\019\001\020\001\019\001\020\001\
\057\001\005\001\046\001\005\001\008\001\005\001\010\001\011\001\
\012\001\013\001\005\001\015\001\016\001\017\001\000\000\019\001\
\042\001\043\001\062\001\042\001\043\001\042\001\043\001\027\001\
\028\001\026\001\020\001\071\001\072\001\033\001\005\001\057\001\
\004\001\005\001\057\001\005\001\057\001\020\001\010\001\011\001\
\012\001\013\001\046\001\015\001\016\001\017\001\000\000\019\001\
\042\001\043\001\001\001\002\001\015\001\004\001\001\001\027\001\
\028\001\004\001\062\001\010\001\012\001\033\001\013\001\057\001\
\012\001\007\001\013\001\071\001\072\001\004\001\005\001\009\001\
\020\001\008\001\046\001\010\001\011\001\028\001\013\001\066\001\
\015\001\016\001\017\001\000\000\019\001\005\001\027\001\034\001\
\007\001\020\001\062\001\019\001\027\001\028\001\042\001\043\001\
\009\001\027\001\033\001\071\001\072\001\004\001\005\001\009\001\
\051\001\008\001\000\000\010\001\011\001\057\001\013\001\046\001\
\015\001\016\001\017\001\027\001\019\001\003\001\005\001\005\001\
\027\001\007\001\027\001\009\001\027\001\028\001\012\001\062\001\
\020\001\005\001\033\001\009\001\027\001\004\001\005\001\027\001\
\071\001\072\001\030\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\005\001\019\001\005\001\042\001\043\001\
\066\001\005\001\005\001\005\001\027\001\028\001\007\001\062\001\
\005\001\005\001\033\001\005\001\005\001\057\001\020\001\020\001\
\071\001\072\001\004\001\005\001\005\001\020\001\005\001\046\001\
\010\001\011\001\012\001\013\001\027\001\015\001\016\001\017\001\
\007\001\019\001\039\001\040\001\041\001\042\001\043\001\062\001\
\066\001\027\001\028\001\042\001\043\001\007\001\007\001\033\001\
\071\001\072\001\004\001\005\001\057\001\167\001\008\001\007\001\
\010\001\011\001\057\001\013\001\046\001\015\001\016\001\017\001\
\005\000\019\001\007\001\165\000\042\001\005\001\179\000\136\000\
\214\000\027\001\028\001\065\001\062\001\020\001\194\001\033\001\
\105\002\110\001\004\001\005\001\027\001\071\001\072\001\030\001\
\010\001\011\001\012\001\013\001\046\001\015\001\016\001\017\001\
\225\001\019\001\079\002\042\001\043\001\202\001\255\255\255\255\
\255\255\027\001\028\001\255\255\062\001\255\255\255\255\033\001\
\255\255\255\255\057\001\020\001\255\255\071\001\072\001\255\255\
\020\001\255\255\004\001\005\001\046\001\030\001\008\001\027\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\255\255\042\001\043\001\255\255\062\001\255\255\042\001\043\001\
\255\255\027\001\028\001\255\255\255\255\071\001\072\001\033\001\
\057\001\255\255\004\001\005\001\255\255\057\001\255\255\255\255\
\010\001\011\001\012\001\013\001\046\001\015\001\016\001\017\001\
\255\255\019\001\003\001\255\255\005\001\006\001\007\001\255\255\
\009\001\027\001\028\001\255\255\062\001\255\255\255\255\033\001\
\255\255\255\255\255\255\020\001\255\255\071\001\072\001\004\001\
\005\001\255\255\027\001\255\255\046\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\255\255\039\001\040\001\
\041\001\042\001\043\001\255\255\062\001\255\255\027\001\028\001\
\020\001\255\255\020\001\004\001\033\001\071\001\072\001\008\001\
\057\001\010\001\011\001\012\001\013\001\020\001\015\001\016\001\
\017\001\046\001\255\255\255\255\069\001\255\255\042\001\043\001\
\042\001\043\001\255\255\028\001\255\255\255\255\255\255\255\255\
\033\001\062\001\255\255\042\001\043\001\057\001\255\255\057\001\
\004\001\255\255\071\001\072\001\255\255\046\001\010\001\011\001\
\012\001\013\001\057\001\015\001\016\001\017\001\255\255\255\255\
\001\001\255\255\255\255\004\001\255\255\062\001\255\255\020\001\
\028\001\010\001\255\255\004\001\013\001\033\001\071\001\072\001\
\017\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\255\255\046\001\028\001\255\255\042\001\043\001\255\255\
\003\001\034\001\005\001\028\001\007\001\255\255\009\001\255\255\
\033\001\012\001\062\001\020\001\057\001\255\255\255\255\255\255\
\255\255\020\001\027\001\071\001\072\001\046\001\020\001\255\255\
\027\001\255\255\003\001\030\001\005\001\027\001\007\001\255\255\
\009\001\042\001\043\001\012\001\255\255\062\001\255\255\042\001\
\043\001\255\255\255\255\020\001\042\001\043\001\071\001\072\001\
\057\001\255\255\027\001\255\255\255\255\030\001\057\001\255\255\
\255\255\255\255\255\255\057\001\021\001\022\001\023\001\024\001\
\255\255\042\001\043\001\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\255\255\
\057\001\255\255\255\255\255\255\045\001\255\255\255\255\048\001\
\049\001\255\255\255\255\052\001\053\001\255\255\055\001\255\255\
\255\255\058\001\059\001\060\001\061\001\255\255\255\255\064\001\
\255\255\255\255\067\001\255\255\003\001\070\001\005\001\255\255\
\007\001\255\255\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\255\255\030\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 137 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1027 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 141 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1038 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 144 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1050 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 147 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1059 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 150 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1069 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 152 "pitparser.mly"
 ( (TEquation(_2, _3, _5)) :: _7 )
# 1079 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 154 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1087 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 156 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1096 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 158 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1106 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 160 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1115 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 162 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1124 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 164 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1133 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 166 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1143 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 168 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1152 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 170 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1162 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 172 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1171 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 174 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1180 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 176 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1189 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 178 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1197 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 180 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1206 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 182 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1214 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 184 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1223 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 186 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1231 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 188 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1239 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 190 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1248 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 192 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1256 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 194 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1266 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 197 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1275 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 200 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1284 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'mayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 203 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1293 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 205 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1301 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 207 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1313 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 213 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1323 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 215 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1331 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 217 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1341 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 219 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1350 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "pitparser.mly"
        ( [] )
# 1356 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 225 "pitparser.mly"
 ( _1, _3, None )
# 1364 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 227 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1375 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 235 "pitparser.mly"
        ( _1 )
# 1382 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 237 "pitparser.mly"
        ( _1 )
# 1389 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 239 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1396 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "pitparser.mly"
        ( "*", parse_extent() )
# 1402 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "pitparser.mly"
        ( ".", parse_extent() )
# 1408 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "pitparser.mly"
        ( "set", parse_extent() )
# 1414 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "pitparser.mly"
        ( "=", parse_extent() )
# 1420 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "pitparser.mly"
        ( ",", parse_extent() )
# 1426 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 253 "pitparser.mly"
        ( [_1] )
# 1433 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 255 "pitparser.mly"
        ( _1 :: _2 )
# 1441 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 259 "pitparser.mly"
 ( [_1] )
# 1448 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 261 "pitparser.mly"
        ( _1 :: _3 )
# 1456 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 267 "pitparser.mly"
        ( _2 )
# 1463 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "pitparser.mly"
        ( [] )
# 1469 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 273 "pitparser.mly"
    ( _1 :: _3 )
# 1477 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 275 "pitparser.mly"
    ( [_1] )
# 1484 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 279 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1493 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 282 "pitparser.mly"
        ( [(_1,_3)] )
# 1501 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 286 "pitparser.mly"
        ( _1 )
# 1508 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "pitparser.mly"
        ( [] )
# 1514 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 292 "pitparser.mly"
        ( _2 )
# 1521 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "pitparser.mly"
        ( [] )
# 1527 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 298 "pitparser.mly"
        ( _1 )
# 1534 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1541 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 305 "pitparser.mly"
        ( _1 )
# 1548 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "pitparser.mly"
        ( [] )
# 1554 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 311 "pitparser.mly"
    ( _1 :: _3 )
# 1562 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 313 "pitparser.mly"
    ( [_1] )
# 1569 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "pitparser.mly"
 ( PFail, parse_extent () )
# 1575 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 321 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1583 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 323 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1592 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 326 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1599 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 328 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1607 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 330 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1615 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 332 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1622 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 334 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1630 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 336 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1638 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 338 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1648 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 345 "pitparser.mly"
 ( _1 :: _3 )
# 1656 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 347 "pitparser.mly"
 ( [_1] )
# 1663 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 351 "pitparser.mly"
        ( _1 )
# 1670 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 353 "pitparser.mly"
        ( [] )
# 1676 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 359 "pitparser.mly"
    ( (_1, Some _4) )
# 1684 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 361 "pitparser.mly"
    ( (_1, None) )
# 1691 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 365 "pitparser.mly"
    ( _1 :: _3 )
# 1699 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 367 "pitparser.mly"
    ( [_1] )
# 1706 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 373 "pitparser.mly"
    ( _1 :: _3 )
# 1714 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 375 "pitparser.mly"
    ( [_1] )
# 1721 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 379 "pitparser.mly"
    ( PRealQuery(_1) )
# 1728 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 381 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1735 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 383 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1742 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 387 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1750 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 389 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1757 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 391 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1766 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 393 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1774 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 395 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1782 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 397 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1789 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 399 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1797 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 401 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1805 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 403 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1813 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 405 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1820 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 407 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1827 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 409 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1835 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 411 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1845 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 416 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1853 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 418 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1860 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 420 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1869 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 424 "pitparser.mly"
 ( _1 :: _3 )
# 1877 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 426 "pitparser.mly"
 ( [_1] )
# 1884 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 430 "pitparser.mly"
        ( _1 )
# 1891 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "pitparser.mly"
        ( [] )
# 1897 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 437 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1906 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 439 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1914 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 441 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 1923 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 443 "pitparser.mly"
        ( [(_1, _3)] )
# 1931 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 447 "pitparser.mly"
        ( _1 )
# 1938 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "pitparser.mly"
        ( [] )
# 1944 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 455 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 1953 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 457 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 1963 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 459 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 1971 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 463 "pitparser.mly"
    ( _2 )
# 1978 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 465 "pitparser.mly"
    ( -1 )
# 1984 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 469 "pitparser.mly"
    ( _2 )
# 1991 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "pitparser.mly"
    ( -1 )
# 1997 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 475 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2005 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 477 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2013 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 479 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2020 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 481 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2030 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 486 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2038 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 488 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2045 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 490 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2052 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 492 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2061 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 497 "pitparser.mly"
 ( _1 :: _3 )
# 2069 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 499 "pitparser.mly"
 ( [_1] )
# 2076 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 503 "pitparser.mly"
        ( _1 )
# 2083 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 505 "pitparser.mly"
        ( [] )
# 2089 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 510 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2098 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 512 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2106 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 514 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2115 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 516 "pitparser.mly"
        ( [(_1, _3)] )
# 2123 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 520 "pitparser.mly"
        ( _1 )
# 2130 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 522 "pitparser.mly"
        ( [] )
# 2136 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 528 "pitparser.mly"
 ( (_1,_3, false) )
# 2144 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 531 "pitparser.mly"
 ( (_1,_3, true) )
# 2152 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartypeseq) in
    Obj.repr(
# 535 "pitparser.mly"
 ( _1::_3 )
# 2160 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 538 "pitparser.mly"
 ( [_1] )
# 2167 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mayfailvartypeseq) in
    Obj.repr(
# 542 "pitparser.mly"
 ( _2 )
# 2174 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 544 "pitparser.mly"
 ( [] )
# 2180 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 549 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2190 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 551 "pitparser.mly"
 ( [_2,_3,_5] )
# 2199 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 555 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2209 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 557 "pitparser.mly"
 ( [_1,_2,_4] )
# 2218 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 561 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2228 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 563 "pitparser.mly"
 ( [_1,_2,_4] )
# 2237 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 569 "pitparser.mly"
        ( PClause(_1,_3) )
# 2245 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 571 "pitparser.mly"
        ( PFact(_1) )
# 2252 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 573 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2260 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 575 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2268 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 579 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2277 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 581 "pitparser.mly"
 ( [_1,_2] )
# 2285 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 587 "pitparser.mly"
 ( _2 )
# 2292 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 589 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2299 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 591 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2307 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 593 "pitparser.mly"
 ( PRepl _2 )
# 2314 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 595 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2324 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 598 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2333 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 602 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2340 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 605 "pitparser.mly"
 ( PRestr(_2, _4, _5) )
# 2349 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 607 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2358 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 609 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2367 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 611 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2376 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 613 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2384 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 615 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2394 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 617 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2402 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 619 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2414 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 623 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2423 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 625 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2433 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 627 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2444 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 629 "pitparser.mly"
 ( PPar(_1,_3) )
# 2452 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 631 "pitparser.mly"
        ( PEvent(_2, _4, _6) )
# 2461 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 633 "pitparser.mly"
        ( PEvent(_2, [], _3) )
# 2469 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 635 "pitparser.mly"
        ( PPhase(_2, _3) )
# 2477 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 639 "pitparser.mly"
        ( _2 )
# 2484 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 641 "pitparser.mly"
        ( PNil )
# 2490 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 645 "pitparser.mly"
        ( _2 )
# 2497 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 647 "pitparser.mly"
        ( PNil )
# 2503 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 651 "pitparser.mly"
        ( _2 )
# 2510 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 653 "pitparser.mly"
        ( PNil )
# 2516 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 657 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2523 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 659 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2531 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 661 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2541 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 666 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2549 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 668 "pitparser.mly"
    ( PPatEqual(_2) )
# 2556 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 672 "pitparser.mly"
    ( _1 :: _3 )
# 2564 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 674 "pitparser.mly"
    ( [_1] )
# 2571 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 678 "pitparser.mly"
    ( _1 )
# 2578 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 680 "pitparser.mly"
    ( [] )
# 2584 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 686 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2592 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 688 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2601 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 691 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2608 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 693 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2616 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 695 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2624 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 697 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2631 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 699 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2639 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 701 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2647 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 703 "pitparser.mly"
 ( PPRestr(_2, _4, _6), parse_extent() )
# 2656 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 705 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2664 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 707 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2673 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 709 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2682 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 711 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2692 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 713 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2701 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 715 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2711 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 717 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2721 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 724 "pitparser.mly"
 ( _1 :: _3 )
# 2729 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 726 "pitparser.mly"
 ( [_1] )
# 2736 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 730 "pitparser.mly"
        ( _1 )
# 2743 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 732 "pitparser.mly"
        ( [] )
# 2749 "pitparser.ml"
               : 'ptermseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
